let num:[Int] = [7,1,0,8,6,5,2,9,4]
/*let sort = num.sorted()
let sort = num.sorted{ (a,b) -> Bool in 
    return a > b
    }
let sort = num.sorted{ (a,b) -> Bool in 
    print(a)
    return a % 2 == 0}
let sort = num.sorted(by:>)

let sort = num.sorted(by: { $0 < $1 })*/
//trailing closure
let sort = num.sorted { $0 < $1 }

print(sort)
****************************************************************
	Transforms each element
	
let numbers = [1, 2, 3, 4]
let squares = numbers.map( { (n: Int) -> Int in
    return n * n
} )


let n1 = [1, 2, 3, 4]

let odd = n1.map({(a:Int) -> String in
if a % 2 != 0{
    return "odd"
}
    else{
        return "even"
    }
})
print(odd)


print(squares)
let isEven = numbers.map { $0 % 2 == 0 }
print(isEven) 

let n1 = [0,1, 2, 3, 4]
let odd = n1.map({
    if $0 % 2 != 0 {
        return "odd"
    }
    else
    {
        return "even"
    }
})
print(odd)

let squares = numbers.map { $0 * $0 }
print(squares)
****************************************************************
It keeps the element in the result only if the closure returns true.

let numbers = [1, 3, 5, 7, 2, 6, 4]
let lessThanFive = numbers.filter( { (number: Int) -> Bool in
    return number < 5
} )
print(lessThanFive)  // [1, 3, 2, 4]


let lessThanFive = numbers.filter { $0 < 5 }
print(lessThanFive)  // [1, 3, 2, 4]

let evenNumbers = numbers.filter { $0 % 2 == 0 }
print(evenNumbers)  // [2, 6, 4]

let names = ["Priya", "Praba", "Viji", "Anu"]
let shortNames = names.filter { $0.count <= 4 }
print(shortNames)  // ["Viji", "Anu"]

****************************************************************
It takes an array and reduces it to a single value—this could be a sum, a string, an object, or anything else, depending on what logic you apply.
let numbers = [1, 2, 3, 4]
let combinedString = numbers.reduce("") { (partialResult: String, number: Int) -> String in
    print(partialResult)
    return partialResult + "\(number)"
}
print(combinedString)  // "1234"


let combinedString = numbers.reduce("") { $0 + "\($1)" }
print(combinedString) // "1234"


let combinedString = numbers.reduce("",{$0 + "\($1)"})
print(combinedString)


sum

let sum = numbers.reduce(0) { $0 + $1 }
print(sum) 

let numbers = [1, 2, 3, 4, 5]
let sum = numbers.reduce(0, { $0 + $1 })
print(sum) 


Reducing Strings

let words = ["Swift", "is", "fun"]
let sentence = words.reduce("") { $0 + " " + $1 }
print(sentence)
****************************************************************
compactMap
It transforms each element of a collection using a closure AND automatically removes nil values from the result.

print(Int("0"))//optional(0)

let strings = ["1", "2", "three", "4", "five"]
let mapResult = strings.map { Int($0) }
print(mapResult)  
let numbers = strings.compactMap { Int($0) }
print(numbers) 

[Optional(1), Optional(2), nil, Optional(4), nil]
[1, 2, 4]

let optionalNumbers: [Int?] = [1, nil, 2, nil, 3]
let unwrapped = optionalNumbers.compactMap { $0 }
print(unwrapped) 

****************************************************************
forEach
You can’t use return, break, or continue inside forEach like you can in for-in
let numbers = [1, 2, 3, 4, 5]

numbers.forEach { number in
    print("Number: \(number)")
}

let numbers = [1, 2, 3, 4, 5]
numbers.forEach { print("Double: \($0 * 2)") }

let names = ["Priya", "Praba", "Viji"]
names.enumerated().forEach { (index, name) in
    print("\(index): \(name)")
}
****************************************************************
flatMap

flatMap transforms and then flattens the result.
Used to eliminate nesting (e.g., arrays of arrays → single array).
It’s like map, but also removes one level of optionality or nesting.

let array = [[1, 2], [3, 4], [5, 6]]
let flat = array.flatMap { $0 }
print(flat)

let names = [["Priya", "Praba"], ["Viji", "Anu"]]
let uppercased = names.flatMap { $0.map { $0.uppercased() } }
print(uppercased)

let numbers: [String?] = ["1", nil, "2", nil, "3"]
let valid = numbers.flatMap { $0 }
print(valid) 

let strings = ["1", "hello", "3"]
let ints = strings.flatMap { Int($0) }
print(ints)

let sentences = ["Swift is fun", "Learn flatMap now"]
let words = sentences.flatMap { $0.split(separator: " ") }
print(words)

let dict = ["a": [1, 2], "b": [3, 4]]
let flat = dict.flatMap { $0.value }
print(flat) //[3, 4, 1, 2]
