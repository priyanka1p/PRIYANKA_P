*****************************************************************************
Custom environment key with default library instance present
No need to pass the instance unless want a new one
If parent view is not there, it takes the default instance.
If parent view is there and then it takes that instance even without passing.

*****************************************************************************
import SwiftUI

// Define a custom EnvironmentKey for Library
struct LibraryKey: EnvironmentKey {
    static let defaultValue = Library()
}

//Extend EnvironmentValues for your custom key
extension EnvironmentValues {
    var library: Library {
        get { self[LibraryKey.self] }
        set { self[LibraryKey.self] = newValue }
    }
}

@Observable
class Library {
    var books: [String] = [ "Swift Programming", "iOS" ]
    var name = "oxford"
}
@Observable
class Library1 {
    var books: [String] = [ "Swift Programming", "iOS" ]
    var name = "oxford"
}


struct LibraryView: View {
    @Environment(\.library) private var library
    
    var body: some View {
        VStack {
            Text("SCHOOL \(library.name)")
            List(library.books, id: \.self) { book in
                Text(book)
            }
            Button("Add") {
                library.books.append("Bhagat Singh")
                library.name = "anna univ"
            }
            CollegeLibraryView()
                .environment(\.library, Library())
        }
    }
}

struct CollegeLibraryView: View {
    @Environment(\.library) private var collegebooks


    var body: some View {
        VStack {
            Text("COLLEGE \(collegebooks.name)")
            List(collegebooks.books, id: \.self) { book in
                HStack {
                    Text(book)
                    Spacer()
                    Text("ECE")
                }
            }
            Button("Add") {
                collegebooks.books.append("New College Book")
            }
        }
    }
}

#Preview {
    LibraryView()
        .environment(\.library, Library())
}



*****************************************************************************
Without using custom environment key
Like we have to definitely pass the library object ignorer to initialise o/w crashes.
For child view no need to pass the parents object as it will takes during runtime.
For child view, can pass or cannot pass the new instance or old object depending on application.

*****************************************************************************
import SwiftUI

@Observable
class Library {
    var books: [String] = [ "Swift Programming", "iOS" ]
}

struct LibraryView: View {
    @Environment(Library.self) private var library
    
    var body: some View {
        print(" SCHOOL LIBRARY VIEW")
        return VStack{
            
            Text("SCHOOL")
            List(library.books, id: \.self) { book in
                Text(book)
            }
            Button("Add"){
                library.books.append("bhagat singh")
            }
//            CollegeLibraryView(collegebooks: _library)

            CollegeLibraryView()
                .environment(library)
        }
    }

}
struct CollegeLibraryView: View {
    @Environment(Library.self) var collegebooks
    
    var body: some View {
        print("college library view")
        return VStack{
            Text("COLLEGE")

            List(collegebooks.books,id: \.self){book in
                HStack{
                    Text(book)
                    Spacer()
                    Text("ECE")
                }
            }
            Button("Add"){
                collegebooks.books.append("bhagat singh")
            }
        }
    }
}

#Preview {
    LibraryView()
        .environment(Library())
}

*****************************************************************************
Use bindable so that it binds the object and the text field for two way communication
*****************************************************************************
import SwiftUI

@Observable
class Library {
    var books: [String] = [ "Swift Programming", "iOS" ]
}

struct LibraryView: View {
    @Environment(Library.self) private var library
    
    var body: some View {
        print(" SCHOOL LIBRARY VIEW")
        return VStack{
            @Bindable var l = library
            Text("SCHOOL")
            TextField("COLLEGE", text: $l.books[0])

            List(library.books, id: \.self) { book in
                Text(book)
            }
            Button("Add"){
                library.books.append("bhagat singh")
            }
            CollegeLibraryView(collegebooks: _library)
        }
    }

}
struct CollegeLibraryView: View {
    @Environment(Library.self) var collegebooks
    
    var body: some View {
        print("college library view")
        return VStack{
            @Bindable var l = collegebooks

            Text("COLLEGE")
            TextField("COLLEGE", text: $l.books[0])

            List(collegebooks.books,id: \.self){book in
                HStack{
                    Text(book)
                    Spacer()
                    Text("ECE")
                }
            }
            Button("Add"){
                collegebooks.books.append("bhagat singh")
            }
        }
    }
}

#Preview {
    LibraryView()
        .environment(Library())
}

*****************************************************************************
ENVIRONMENTOBJECT
Need an initial instance to be created as there is no default instance if there is no parent view

*****************************************************************************
import SwiftUI
class UserSession: ObservableObject {
    @Published var username: String = "Priya"
}


struct ViewA: View {
    var body: some View {
        VStack {
            Text("View A")
            ViewB()
        }
    }
}
struct ViewB: View {
    var body: some View {
        VStack {
            Text("View B")
            ViewC()
        }
    }
}

struct ViewC: View {
    var body: some View {
        VStack {
            Text("View C")
            ViewD()
        }
    }
}

struct ViewD: View {
    @EnvironmentObject var session: UserSession
    
    var body: some View {
        VStack {
            Text("View D")
            Text("Hello, \(session.username)!")
                .font(.headline)
            
            Button("Change Username") {
                session.username = "Praba"
            }
            .padding()
            .background(Color.blue)
            .foregroundColor(.white)
            .cornerRadius(8)
        }
    }
}
#Preview(body: {
    ViewA()
        .environmentObject(UserSession())
})

*****************************************************************************

import SwiftUI

class Theme: ObservableObject {
    @Published var primaryColor: Color = .blue
}

class CartManager: ObservableObject {
    @Published var items: [String] = []
    
    func addItem(_ item: String) {
        items.append(item)
    }
}

struct ContentView: View {
    @EnvironmentObject var theme: Theme
    @EnvironmentObject var cart: CartManager
    
    var body: some View {
        VStack(spacing: 20) {
            Text(" Shopping App")
                .font(.title)
                .foregroundColor(theme.primaryColor)
            
            Text("Items in Cart: \(cart.items.count)")
                .foregroundColor(.secondary)
            
            Button("Add Apple") {
                cart.addItem("Apple")
            }
            .padding()
            .background(theme.primaryColor)
            .foregroundColor(.white)
            .cornerRadius(10)
            
            ThemeSelectorView()
                // nested view also reads @EnvironmentObject
        }
        .padding()
    }
}

struct ThemeSelectorView: View {
    @EnvironmentObject var theme: Theme
    
    var body: some View {
        HStack {
            Button("Switch to Red") {
                theme.primaryColor = .red
            }
            Button("Switch to Green") {
                theme.primaryColor = .green
            }
        }
    }
}
#Preview(body: {
    ContentView()
        .environmentObject(Theme())
        .environmentObject(CartManager())
})

*****************************************************************************


import SwiftUI

// A shared theme object for color customization
class Multiple: ObservableObject {
    @Published var primaryColor: Color
    init(primaryColor: Color) {
        self.primaryColor = primaryColor
    }
}

// A view that displays its active theme color in the UI for clarity
struct ArticlesListView: View {
    @EnvironmentObject var theme: Multiple
    var body: some View {
        VStack {
            Text("Articles List")
                .foregroundColor(theme.primaryColor)
            Text("Active Color: \(theme.primaryColor.description)")
            Button("Change Color to red", action: {
                theme.primaryColor = Color.red
            })
        }
        .padding()
    }
}

#Preview(body: {
    
    // Example 1: First object takes priority
    ArticlesListView()
        .environmentObject(Multiple(primaryColor: .yellow))   // Takes priority over next line
        .environmentObject( Multiple(primaryColor: .green)) // Ignored if same type

    // Example 2: Closest object takes priority
    VStack {
        ArticlesListView()
            .environmentObject( Multiple(primaryColor: .green)) // Highest priority for ArticlesListView
    }
    .environmentObject(Multiple(primaryColor: .red)) // Lower priority, only used where greenTheme is not supplied
    .border(Color.black)

})
*****************************************************************************
