{\rtf1\ansi\ansicpg1252\cocoartf2821
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Regular;\f1\fnil\fcharset0 Menlo-Bold;}
{\colortbl;\red255\green255\blue255;\red0\green0\blue0;\red255\green255\blue255;\red155\green35\blue147;
\red93\green108\blue121;\red11\green79\blue121;\red57\green0\blue160;\red15\green104\blue160;\red28\green70\blue74;
\red108\green54\blue169;\red196\green26\blue22;\red50\green109\blue116;\red28\green0\blue207;}
{\*\expandedcolortbl;;\csgenericrgb\c0\c0\c0\c85000;\csgenericrgb\c100000\c100000\c100000;\csgenericrgb\c60759\c13753\c57628;
\csgenericrgb\c36526\c42188\c47515;\csgenericrgb\c4314\c30980\c47451;\csgenericrgb\c22454\c0\c62803;\csgenericrgb\c5882\c40784\c62745;\csgenericrgb\c10981\c27276\c28869;
\csgenericrgb\c42190\c21278\c66379;\csgenericrgb\c77000\c10200\c8600;\csgenericrgb\c19418\c42935\c45455;\csgenericrgb\c11000\c0\c81000;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\deftab593
\pard\tx593\pardeftab593\partightenfactor0

\f0\fs24 \cf2 \cb3 *****************************************************************************\
Custom environment key with default library instance present\
No need to pass the instance unless want a new one\
If parent view is not there, it takes the default instance.\
If parent view is there and then it takes that instance even without passing.\
\
*****************************************************************************\
\pard\tx593\pardeftab593\partightenfactor0

\f1\b \cf4 import
\f0\b0 \cf2  SwiftUI\
\
\cf5 // Define a custom EnvironmentKey for Library\cf2 \

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 LibraryKey\cf2 : \cf7 EnvironmentKey\cf2  \{\
    
\f1\b \cf4 static
\f0\b0 \cf2  
\f1\b \cf4 let
\f0\b0 \cf2  \cf8 defaultValue\cf2  = \cf9 Library\cf2 ()\
\}\
\
\cf5 //Extend EnvironmentValues for your custom key\cf2 \

\f1\b \cf4 extension
\f0\b0 \cf2  \cf6 EnvironmentValues\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 library\cf2 : \cf9 Library\cf2  \{\
        
\f1\b \cf4 get
\f0\b0 \cf2  \{ 
\f1\b \cf4 self
\f0\b0 \cf2 [\cf9 LibraryKey\cf2 .
\f1\b \cf4 self
\f0\b0 \cf2 ] \}\
        
\f1\b \cf4 set
\f0\b0 \cf2  \{ 
\f1\b \cf4 self
\f0\b0 \cf2 [\cf9 LibraryKey\cf2 .
\f1\b \cf4 self
\f0\b0 \cf2 ] = newValue \}\
    \}\
\}\
\
\cf10 @Observable\cf2 \

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 Library\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 books\cf2 : [\cf7 String\cf2 ] = [ \cf11 "Swift Programming"\cf2 , \cf11 "iOS"\cf2  ]\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 name\cf2  = \cf11 "oxford"\cf2 \
\}\
\cf10 @Observable\cf2 \

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 Library1\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 books\cf2 : [\cf7 String\cf2 ] = [ \cf11 "Swift Programming"\cf2 , \cf11 "iOS"\cf2  ]\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 name\cf2  = \cf11 "oxford"\cf2 \
\}\
\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 LibraryView\cf2 : \cf7 View\cf2  \{\
    \cf7 @Environment\cf2 (\\.\cf10 library\cf2 ) 
\f1\b \cf4 private
\f0\b0 \cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 library\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2  \{\
            \cf7 Text\cf2 (\cf11 "SCHOOL \cf2 \\(\cf12 library\cf2 .\cf10 name\cf2 )\cf11 "\cf2 )\
            \cf7 List\cf2 (\cf12 library\cf2 .\cf12 books\cf2 , \cf10 id\cf2 : \\.
\f1\b \cf4 self
\f0\b0 \cf2 ) \{ book 
\f1\b \cf4 in
\f0\b0 \cf2 \
                \cf7 Text\cf2 (book)\
            \}\
            \cf7 Button\cf2 (\cf11 "Add"\cf2 ) \{\
                \cf12 library\cf2 .\cf12 books\cf2 .\cf10 append\cf2 (\cf11 "Bhagat Singh"\cf2 )\
                \cf12 library\cf2 .\cf10 name\cf2  = \cf11 "anna univ"\cf2 \
            \}\
            \cf9 CollegeLibraryView\cf2 ()\
                .\cf10 environment\cf2 (\\.\cf10 library\cf2 , \cf9 Library\cf2 ())\
        \}\
    \}\
\}\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 CollegeLibraryView\cf2 : \cf7 View\cf2  \{\
    \cf7 @Environment\cf2 (\\.\cf10 library\cf2 ) 
\f1\b \cf4 private
\f0\b0 \cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 collegebooks\cf2 \
\
\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2  \{\
            \cf7 Text\cf2 (\cf11 "COLLEGE \cf2 \\(\cf12 collegebooks\cf2 .\cf10 name\cf2 )\cf11 "\cf2 )\
            \cf7 List\cf2 (\cf12 collegebooks\cf2 .\cf12 books\cf2 , \cf10 id\cf2 : \\.
\f1\b \cf4 self
\f0\b0 \cf2 ) \{ book 
\f1\b \cf4 in
\f0\b0 \cf2 \
                \cf7 HStack\cf2  \{\
                    \cf7 Text\cf2 (book)\
                    \cf7 Spacer\cf2 ()\
                    \cf7 Text\cf2 (\cf11 "ECE"\cf2 )\
                \}\
            \}\
            \cf7 Button\cf2 (\cf11 "Add"\cf2 ) \{\
                \cf12 collegebooks\cf2 .\cf12 books\cf2 .\cf10 append\cf2 (\cf11 "New College Book"\cf2 )\
            \}\
        \}\
    \}\
\}\
\
\cf10 #Preview\cf2  \{\
    \cf9 LibraryView\cf2 ()\
        .\cf10 environment\cf2 (\\.\cf10 library\cf2 , \cf9 Library\cf2 ())\
\}\
\pard\tx593\pardeftab593\partightenfactor0
\cf2 \
\
\
*****************************************************************************\
Without using custom environment key\
Like we have to definitely pass the library object ignorer to initialise o/w crashes.\
For child view no need to pass the parents object as it will takes during runtime.\
For child view, can pass or cannot pass the new instance or old object depending on application.\
\
*****************************************************************************\

\f1\b \cf4 import
\f0\b0 \cf2  SwiftUI\
\
\cf10 @Observable\cf2 \

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 Library\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 books\cf2 : [\cf7 String\cf2 ] = [ \cf11 "Swift Programming"\cf2 , \cf11 "iOS"\cf2  ]\
\}\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 LibraryView\cf2 : \cf7 View\cf2  \{\
    \cf7 @Environment\cf2 (\cf9 Library\cf2 .
\f1\b \cf4 self
\f0\b0 \cf2 ) 
\f1\b \cf4 private
\f0\b0 \cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 library\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf10 print\cf2 (\cf11 " SCHOOL LIBRARY VIEW"\cf2 )\
        
\f1\b \cf4 return
\f0\b0 \cf2  \cf7 VStack\cf2 \{\
            \
            \cf7 Text\cf2 (\cf11 "SCHOOL"\cf2 )\
            \cf7 List\cf2 (\cf12 library\cf2 .\cf12 books\cf2 , \cf10 id\cf2 : \\.
\f1\b \cf4 self
\f0\b0 \cf2 ) \{ book 
\f1\b \cf4 in
\f0\b0 \cf2 \
                \cf7 Text\cf2 (book)\
            \}\
            \cf7 Button\cf2 (\cf11 "Add"\cf2 )\{\
                \cf12 library\cf2 .\cf12 books\cf2 .\cf10 append\cf2 (\cf11 "bhagat singh"\cf2 )\
            \}\
//            \cf9 CollegeLibraryView\cf2 (\cf12 collegebooks\cf2 : \cf12 _library\cf2 )\
\
            \cf9 CollegeLibraryView\cf2 ()\
                .\cf10 environment\cf2 (\cf12 library\cf2 )\
        \}\
    \}\
\
\}\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 CollegeLibraryView\cf2 : \cf7 View\cf2  \{\
    \cf7 @Environment\cf2 (\cf9 Library\cf2 .
\f1\b \cf4 self
\f0\b0 \cf2 ) 
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 collegebooks\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf10 print\cf2 (\cf11 "college library view"\cf2 )\
        
\f1\b \cf4 return
\f0\b0 \cf2  \cf7 VStack\cf2 \{\
            \cf7 Text\cf2 (\cf11 "COLLEGE"\cf2 )\
\
            \cf7 List\cf2 (\cf12 collegebooks\cf2 .\cf12 books\cf2 ,\cf10 id\cf2 : \\.
\f1\b \cf4 self
\f0\b0 \cf2 )\{book 
\f1\b \cf4 in
\f0\b0 \cf2 \
                \cf7 HStack\cf2 \{\
                    \cf7 Text\cf2 (book)\
                    \cf7 Spacer\cf2 ()\
                    \cf7 Text\cf2 (\cf11 "ECE"\cf2 )\
                \}\
            \}\
            \cf7 Button\cf2 (\cf11 "Add"\cf2 )\{\
                \cf12 collegebooks\cf2 .\cf12 books\cf2 .\cf10 append\cf2 (\cf11 "bhagat singh"\cf2 )\
            \}\
        \}\
    \}\
\}\
\
\cf10 #Preview\cf2  \{\
    \cf9 LibraryView\cf2 ()\
        .\cf10 environment\cf2 (\cf9 Library\cf2 ())\
\}\
\
*****************************************************************************\
Use bindable so that it binds the object and the text field for two way communication\
*****************************************************************************\

\f1\b \cf4 import
\f0\b0 \cf2  SwiftUI\
\
\cf10 @Observable\cf2 \

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 Library\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 books\cf2 : [\cf7 String\cf2 ] = [ \cf11 "Swift Programming"\cf2 , \cf11 "iOS"\cf2  ]\
\}\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 LibraryView\cf2 : \cf7 View\cf2  \{\
    \cf7 @Environment\cf2 (\cf9 Library\cf2 .
\f1\b \cf4 self
\f0\b0 \cf2 ) 
\f1\b \cf4 private
\f0\b0 \cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 library\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf10 print\cf2 (\cf11 " SCHOOL LIBRARY VIEW"\cf2 )\
        
\f1\b \cf4 return
\f0\b0 \cf2  \cf7 VStack\cf2 \{\
            \cf7 @Bindable\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  l = \cf12 library\cf2 \
            \cf7 Text\cf2 (\cf11 "SCHOOL"\cf2 )\
            \cf7 TextField\cf2 (\cf11 "COLLEGE"\cf2 , \cf10 text\cf2 : $l.\cf12 books\cf2 [\cf13 0\cf2 ])\
\
            \cf7 List\cf2 (\cf12 library\cf2 .\cf12 books\cf2 , \cf10 id\cf2 : \\.
\f1\b \cf4 self
\f0\b0 \cf2 ) \{ book 
\f1\b \cf4 in
\f0\b0 \cf2 \
                \cf7 Text\cf2 (book)\
            \}\
            \cf7 Button\cf2 (\cf11 "Add"\cf2 )\{\
                \cf12 library\cf2 .\cf12 books\cf2 .\cf10 append\cf2 (\cf11 "bhagat singh"\cf2 )\
            \}\
            \cf9 CollegeLibraryView\cf2 (\cf12 collegebooks\cf2 : \cf12 _library\cf2 )\
        \}\
    \}\
\
\}\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 CollegeLibraryView\cf2 : \cf7 View\cf2  \{\
    \cf7 @Environment\cf2 (\cf9 Library\cf2 .
\f1\b \cf4 self
\f0\b0 \cf2 ) 
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 collegebooks\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf10 print\cf2 (\cf11 "college library view"\cf2 )\
        
\f1\b \cf4 return
\f0\b0 \cf2  \cf7 VStack\cf2 \{\
            \cf7 @Bindable\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  l = \cf12 collegebooks\cf2 \
\
            \cf7 Text\cf2 (\cf11 "COLLEGE"\cf2 )\
            \cf7 TextField\cf2 (\cf11 "COLLEGE"\cf2 , \cf10 text\cf2 : $l.\cf12 books\cf2 [\cf13 0\cf2 ])\
\
            \cf7 List\cf2 (\cf12 collegebooks\cf2 .\cf12 books\cf2 ,\cf10 id\cf2 : \\.
\f1\b \cf4 self
\f0\b0 \cf2 )\{book 
\f1\b \cf4 in
\f0\b0 \cf2 \
                \cf7 HStack\cf2 \{\
                    \cf7 Text\cf2 (book)\
                    \cf7 Spacer\cf2 ()\
                    \cf7 Text\cf2 (\cf11 "ECE"\cf2 )\
                \}\
            \}\
            \cf7 Button\cf2 (\cf11 "Add"\cf2 )\{\
                \cf12 collegebooks\cf2 .\cf12 books\cf2 .\cf10 append\cf2 (\cf11 "bhagat singh"\cf2 )\
            \}\
        \}\
    \}\
\}\
\
\cf10 #Preview\cf2  \{\
    \cf9 LibraryView\cf2 ()\
        .\cf10 environment\cf2 (\cf9 Library\cf2 ())\
\}\
\pard\tx593\pardeftab593\partightenfactor0
\cf2 \
\pard\tx593\pardeftab593\partightenfactor0
\cf2 *****************************************************************************\
ENVIRONMENTOBJECT\
Need an initial instance to be created as there is no default instance if there is no parent view\
\
*****************************************************************************\

\f1\b \cf4 import
\f0\b0 \cf2  SwiftUI\

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 UserSession\cf2 : \cf7 ObservableObject\cf2  \{\
    \cf7 @Published\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 username\cf2 : \cf7 String\cf2  = \cf11 "Priya"\cf2 \
\}\
\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 ViewA\cf2 : \cf7 View\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2  \{\
            \cf7 Text\cf2 (\cf11 "View A"\cf2 )\
            \cf9 ViewB\cf2 ()\
        \}\
    \}\
\}\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 ViewB\cf2 : \cf7 View\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2  \{\
            \cf7 Text\cf2 (\cf11 "View B"\cf2 )\
            \cf9 ViewC\cf2 ()\
        \}\
    \}\
\}\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 ViewC\cf2 : \cf7 View\cf2  \{\
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2  \{\
            \cf7 Text\cf2 (\cf11 "View C"\cf2 )\
            \cf9 ViewD\cf2 ()\
        \}\
    \}\
\}\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 ViewD\cf2 : \cf7 View\cf2  \{\
    \cf7 @EnvironmentObject\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 session\cf2 : \cf9 UserSession\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2  \{\
            \cf7 Text\cf2 (\cf11 "View D"\cf2 )\
            \cf7 Text\cf2 (\cf11 "Hello, \cf2 \\(\cf12 session\cf2 .\cf12 username\cf2 )\cf11 !"\cf2 )\
                .\cf10 font\cf2 (.\cf10 headline\cf2 )\
            \
            \cf7 Button\cf2 (\cf11 "Change Username"\cf2 ) \{\
                \cf12 session\cf2 .\cf12 username\cf2  = \cf11 "Praba"\cf2 \
            \}\
            .\cf10 padding\cf2 ()\
            .\cf10 background\cf2 (\cf7 Color\cf2 .\cf10 blue\cf2 )\
            .\cf10 foregroundColor\cf2 (.\cf10 white\cf2 )\
            .\cf10 cornerRadius\cf2 (\cf13 8\cf2 )\
        \}\
    \}\
\}\
\cf7 #Preview\cf2 (\cf7 body\cf2 : \{\
    \cf9 ViewA\cf2 ()\
        .\cf10 environmentObject\cf2 (\cf9 UserSession\cf2 ())\
\})\
\
*****************************************************************************\
\

\f1\b \cf4 import
\f0\b0 \cf2  SwiftUI\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 Theme\cf2 : \cf7 ObservableObject\cf2  \{\
    \cf7 @Published\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 primaryColor\cf2 : \cf7 Color\cf2  = .\cf10 blue\cf2 \
\}\
\

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 CartManager\cf2 : \cf7 ObservableObject\cf2  \{\
    \cf7 @Published\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 items\cf2 : [\cf7 String\cf2 ] = []\
    \
    
\f1\b \cf4 func
\f0\b0 \cf2  \cf8 addItem\cf2 (\cf8 _\cf2  item: \cf7 String\cf2 ) \{\
        \cf12 items\cf2 .\cf10 append\cf2 (item)\
    \}\
\}\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 ContentView\cf2 : \cf7 View\cf2  \{\
    \cf7 @EnvironmentObject\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 theme\cf2 : \cf9 Theme\cf2 \
    \cf7 @EnvironmentObject\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 cart\cf2 : \cf9 CartManager\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2 (\cf10 spacing\cf2 : \cf13 20\cf2 ) \{\
            \cf7 Text\cf2 (\cf11 " Shopping App"\cf2 )\
                .\cf10 font\cf2 (.\cf10 title\cf2 )\
                .\cf10 foregroundColor\cf2 (\cf12 theme\cf2 .\cf12 primaryColor\cf2 )\
            \
            \cf7 Text\cf2 (\cf11 "Items in Cart: \cf2 \\(\cf12 cart\cf2 .\cf12 items\cf2 .\cf10 count\cf2 )\cf11 "\cf2 )\
                .\cf10 foregroundColor\cf2 (.\cf10 secondary\cf2 )\
            \
            \cf7 Button\cf2 (\cf11 "Add Apple"\cf2 ) \{\
                \cf12 cart\cf2 .\cf12 addItem\cf2 (\cf11 "Apple"\cf2 )\
            \}\
            .\cf10 padding\cf2 ()\
            .\cf10 background\cf2 (\cf12 theme\cf2 .\cf12 primaryColor\cf2 )\
            .\cf10 foregroundColor\cf2 (.\cf10 white\cf2 )\
            .\cf10 cornerRadius\cf2 (\cf13 10\cf2 )\
            \
            \cf9 ThemeSelectorView\cf2 ()\
                \cf5 // nested view also reads @EnvironmentObject\cf2 \
        \}\
        .\cf10 padding\cf2 ()\
    \}\
\}\
\

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 ThemeSelectorView\cf2 : \cf7 View\cf2  \{\
    \cf7 @EnvironmentObject\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 theme\cf2 : \cf9 Theme\cf2 \
    \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 HStack\cf2  \{\
            \cf7 Button\cf2 (\cf11 "Switch to Red"\cf2 ) \{\
                \cf12 theme\cf2 .\cf12 primaryColor\cf2  = .\cf10 red\cf2 \
            \}\
            \cf7 Button\cf2 (\cf11 "Switch to Green"\cf2 ) \{\
                \cf12 theme\cf2 .\cf12 primaryColor\cf2  = .\cf10 green\cf2 \
            \}\
        \}\
    \}\
\}\
\cf7 #Preview\cf2 (\cf7 body\cf2 : \{\
    \cf9 ContentView\cf2 ()\
        .\cf10 environmentObject\cf2 (\cf9 Theme\cf2 ())\
        .\cf10 environmentObject\cf2 (\cf9 CartManager\cf2 ())\
\})\
\
*****************************************************************************\
\pard\tx593\pardeftab593\partightenfactor0
\cf2 \
\

\f1\b \cf4 import
\f0\b0 \cf2  SwiftUI\
\
\cf5 // A shared theme object for color customization\cf2 \

\f1\b \cf4 class
\f0\b0 \cf2  \cf6 Multiple\cf2 : \cf7 ObservableObject\cf2  \{\
    \cf7 @Published\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 primaryColor\cf2 : \cf7 Color\cf2 \
    
\f1\b \cf4 init
\f0\b0 \cf2 (\cf8 primaryColor\cf2 : \cf7 Color\cf2 ) \{\
        
\f1\b \cf4 self
\f0\b0 \cf2 .\cf12 primaryColor\cf2  = primaryColor\
    \}\
\}\
\
\cf5 // A view that displays its active theme color in the UI for clarity\cf2 \

\f1\b \cf4 struct
\f0\b0 \cf2  \cf6 ArticlesListView\cf2 : \cf7 View\cf2  \{\
    \cf7 @EnvironmentObject\cf2  
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 theme\cf2 : \cf9 Multiple\cf2 \
    
\f1\b \cf4 var
\f0\b0 \cf2  \cf8 body\cf2 : 
\f1\b \cf4 some
\f0\b0 \cf2  \cf7 View\cf2  \{\
        \cf7 VStack\cf2  \{\
            \cf7 Text\cf2 (\cf11 "Articles List"\cf2 )\
                .\cf10 foregroundColor\cf2 (\cf12 theme\cf2 .\cf12 primaryColor\cf2 )\
            \cf7 Text\cf2 (\cf11 "Active Color: \cf2 \\(\cf12 theme\cf2 .\cf12 primaryColor\cf2 .\cf10 description\cf2 )\cf11 "\cf2 )\
            \cf7 Button\cf2 (\cf11 "Change Color to red"\cf2 , \cf7 action\cf2 : \{\
                \cf12 theme\cf2 .\cf12 primaryColor\cf2  = \cf7 Color\cf2 .\cf10 red\cf2 \
            \})\
        \}\
        .\cf10 padding\cf2 ()\
    \}\
\}\
\
\cf7 #Preview\cf2 (\cf7 body\cf2 : \{\
    \
    \cf5 // Example 1: First object takes priority\cf2 \
    \cf9 ArticlesListView\cf2 ()\
        .\cf10 environmentObject\cf2 (\cf9 Multiple\cf2 (\cf12 primaryColor\cf2 : .\cf10 yellow\cf2 ))   \cf5 // Takes priority over next line\cf2 \
        .\cf10 environmentObject\cf2 ( \cf9 Multiple\cf2 (\cf12 primaryColor\cf2 : .\cf10 green\cf2 )) \cf5 // Ignored if same type\cf2 \
\
    \cf5 // Example 2: Closest object takes priority\cf2 \
    \cf7 VStack\cf2  \{\
        \cf9 ArticlesListView\cf2 ()\
            .\cf10 environmentObject\cf2 ( \cf9 Multiple\cf2 (\cf12 primaryColor\cf2 : .\cf10 green\cf2 )) \cf5 // Highest priority for ArticlesListView\cf2 \
    \}\
    .\cf10 environmentObject\cf2 (\cf9 Multiple\cf2 (\cf12 primaryColor\cf2 : .\cf10 red\cf2 )) \cf5 // Lower priority, only used where greenTheme is not supplied\cf2 \
    .\cf10 border\cf2 (\cf7 Color\cf2 .\cf10 black\cf2 )\
\
\})\
*****************************************************************************\
\
\
*****************************************************************************\
\
\
*****************************************************************************\
}